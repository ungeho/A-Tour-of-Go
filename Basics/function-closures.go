package main

import "fmt"

// Goの関数はクロージャ(closure)
// クロージャは、それ自身の外部から変数を参照する関数値。
// この関数は、参照された変数へアクセスして変える事ができ、その意味で変数へバインド(bind)されている。

// 戻り値は関数と整数
// 戻り値の関数は、無名関数が代入された変数が呼び出された時、内側の関数が呼び出されるようにする為のもの
// 戻り値の整数は、そのまま関数の戻り値のようなもの（無名関数が格納された変数がreturn sumの値になる。)
func adder() func(int) int {
	// posとnegが呼び出された時、内側の関数が呼び出されるので、変数sumの値は保持される。
	sum := 0
	return func(x int) int {
		sum += x
		return sum
	}
}

// 戻り値を関数とし、関数の中に関数を作り、関数を返す。
func count() func() {
	cnt := 1
	// 関数の中に定義された関数を返している。
	return func() {
		fmt.Println(cnt)
		cnt++
	}
}

func main() {
	pos, neg := adder(), adder()
	for i := 0; i < 10; i++ {
		fmt.Println(
			// posのadder()は0~iまでの値を全て足した値が返ってくる。
			pos(i),
			// negのadder()は-2*(0~i)までの値を全て足した値が返ってくる。
			neg(-2*i),
		)
	}

	// ここで、fに入るのは関数の中の関数である。（戻り値が関数な為）
	f := count()
	// 1回目の呼び出しでは当然""1"が出力される。
	f()
	// 2回目の呼び出しでは、外側の関数（count）で定義された変数の値が保持されている為
	// 再度、関数の中の関数を呼び出した時に、"2"が出力される。
	f()
	// 3回目でも2回目と同様に値が保持されている為、"3"が出力される。
	f()

}

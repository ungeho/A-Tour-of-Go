package main

import "fmt"

func main() {
	s := []int{2, 3, 5, 7, 11, 13}
	// 長さに変更はない為、len=6
	// スライスが指し示す最初の値も要素0なので、容量もcap=6
	printSlice(s)

	// スライスの長さを0にする。
	// 値を持っているわけではなく、指し示す先の変更を行っているので
	// 一旦長さを0にしても、再度延長出来る。
	s = s[:0]
	//スライスの最大を0未満にしているので、長さはlen=0になる。
	//スライスは0未満から指しているので、容量は配列の長さと同じcap=6となる。
	printSlice(s)

	// スライスの長さを延長する。
	s = s[:4]
	// 四つまで延長されたので、長さはlen=4
	// 要素番号0から始まるので、容量は配列の最大の要素番号と同じcap=6
	printSlice(s)

	// スライスの最初の二つの値を削除する。
	// 2:4で要素番号2から3までを示すので、長さはlen=2
	// 要素番号2から始まり、配列の最大の要素番号は6なので、容量はcap=4
	s = s[2:]
	printSlice(s)
}

// スライスは長さ(length)と容量(capacity)を持つ。
// 長さと容量はlen()とcaps()という式で得られる。
// 長さはスライスに含まれる要素の数
// 容量はスライスの最初の要素から、元となる配列の要素の最後までの数
func printSlice(s []int) {
	fmt.Printf("len=%d cap=%d %v\n", len(s), cap(s), s)
}
